[{"id":"feae0bd8.ab7198","type":"tab","label":"SinusWave","disabled":false,"info":""},{"id":"37020d8a.de3c62","type":"mqtt in","z":"feae0bd8.ab7198","name":"","topic":"ie/d/j/simatic/v1/s7c1/dp/r/opcuaSinus/default","qos":"2","datatype":"json","broker":"808a4da1.7d6fb","x":210,"y":120,"wires":[["6d16e803.892018"]]},{"id":"6d16e803.892018","type":"function","z":"feae0bd8.ab7198","name":"assign ID- Value ","func":"/*################################# \n    Init Variables\n#################################*/\nlet nameIDMap = global.get(\"NameIDMap\");      \nlet idValueMap = global.get(\"IDValueMap\");    \nlet timestampMapObject = global.get(\"timestampMapObject\");\nlet variableName=\"sinusVal\";\nlet new_message=0;\n\n/*################################# \n    Parse payload and store id and value to the idValueMap\n#################################*/  \nlet m= msg.payload;\nlet timestamp;\nif(m.vals != undefined)\n{\n    //write the recieved Values into the Map (key = id)\n    m.vals.forEach(value => {\n        idValueMap.set(value.id, value.val);\n        timestamp = value.ts;\n        //only send message when sinus value is sent\n        if(value.id == nameIDMap.get(variableName))\n        {\n            //get the id of the sinusVariable and get with this id the current value\n            new_message=1;\n            msg.payload=idValueMap.get(nameIDMap.get(variableName));\n        }\n    });\n    \n    timestampMapObject =\n    {\n        \"ts\": timestamp,\n        \"map\": idValueMap\n    }\n    \n}\nif((new_message===0)){msg = null;}\n\n/*################################# \n    update global maps\n#################################*/  \nglobal.set(\"IDValueMap\", idValueMap);\nglobal.set(\"timestampMapObject\", timestampMapObject);\n\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":680,"y":120,"wires":[["6fac475.ed932b8","473b7b93.d78c94","7023640.900da9c"]]},{"id":"c939e165.5f80a","type":"debug","z":"feae0bd8.ab7198","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1090,"y":40,"wires":[]},{"id":"842285f4.2dce58","type":"mqtt in","z":"feae0bd8.ab7198","name":"","topic":"ie/m/#","qos":"2","datatype":"json","broker":"808a4da1.7d6fb","x":90,"y":40,"wires":[["fb1b016c.97f41"]]},{"id":"d3a6393d.a74fc8","type":"function","z":"feae0bd8.ab7198","name":"write the sinus parameters","func":"/*################################# \n   get the data from the form\n#################################*/ \nlet freq = msg.payload.Frequency;\nlet amp = msg.payload.Amplitude;\nlet off = msg.payload.Offset;\n\n/*################################# \n    get global maps\n#################################*/ \nlet nameIDMap = global.get(\"NameIDMap\"); \n\n/*################################# \n    write MQTT-message\n#################################*/ \nmsg.payload = \n{\n    \"seq\": 1,\n    \"vals\": [\n        {\n        \"id\": nameIDMap.get(\"Frequency\"),       //get the id to the variable name\n        \"val\": Number(freq)\n        },\n        {\n        \"id\": nameIDMap.get(\"Amplitude\"),       //get the id to the variable name\n        \"val\": Number(amp)\n        },\n        {\n        \"id\": nameIDMap.get(\"Offset\"),          //get the id to the variable name\n        \"val\": Number(off)\n        }\n    ]\n}\n\nreturn msg","outputs":1,"noerr":0,"initialize":"","finalize":"","x":720,"y":300,"wires":[["29e68c2e.b50924","9ba922be.24797"]]},{"id":"ecafdd76.69e4b","type":"ui_form","z":"feae0bd8.ab7198","name":"","label":"","group":"7693872.f419678","order":2,"width":0,"height":0,"options":[{"label":"Frequency","value":"Frequency","type":"text","required":true,"rows":null},{"label":"Amplitude","value":"Amplitude","type":"text","required":true,"rows":null},{"label":"Offset","value":"Offset","type":"text","required":true,"rows":null}],"formValue":{"Frequency":"","Amplitude":"","Offset":""},"payload":"","submit":"submit","cancel":"cancel","topic":"","x":470,"y":220,"wires":[["d3a6393d.a74fc8","24f68874.a583d8"]]},{"id":"29e68c2e.b50924","type":"debug","z":"feae0bd8.ab7198","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1090,"y":300,"wires":[]},{"id":"9ba922be.24797","type":"mqtt out","z":"feae0bd8.ab7198","name":"","topic":"ie/d/j/simatic/v1/s7c1/dp/w/opcuaSinus","qos":"2","retain":"","broker":"808a4da1.7d6fb","x":1170,"y":360,"wires":[]},{"id":"2e98ab94.d9e884","type":"ui_gauge","z":"feae0bd8.ab7198","name":"","group":"7693872.f419678","order":2,"width":0,"height":0,"gtype":"gage","title":"gauge","label":"units","format":"{{value}}","min":"-1","max":"1","colors":["#00ff00","#f5f500","#04ff00"],"seg1":"","seg2":"","x":1070,"y":220,"wires":[]},{"id":"24f68874.a583d8","type":"function","z":"feae0bd8.ab7198","name":"adjusting the min/max values to amplitude","func":"var max = (Number(msg.payload.Amplitude) + Number(msg.payload.Offset));\nvar min = max * (-1);\n\nmsg = {ui_control:{min:min,max:max}}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":760,"y":220,"wires":[["2e98ab94.d9e884"]]},{"id":"6fac475.ed932b8","type":"debug","z":"feae0bd8.ab7198","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1090,"y":120,"wires":[]},{"id":"473b7b93.d78c94","type":"ui_chart","z":"feae0bd8.ab7198","name":"","group":"7693872.f419678","order":2,"width":0,"height":0,"label":"chart","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":"6","removeOlderPoints":"","removeOlderUnit":"60","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#00d6e6","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"x":1070,"y":160,"wires":[[]]},{"id":"9cb49e99.1b056","type":"function","z":"feae0bd8.ab7198","name":"update form","func":"/*################################# \n    Init Variables\n#################################*/\nlet nameIDMap = global.get(\"NameIDMap\");      //global defined in \"Name - ID zuordenen\"\nlet idValueMap = global.get(\"IDValueMap\");    //global defined in \"Name - ID zuordenen\", changed here with every message\nlet oldValues = global.get(\"oldValues\");      //global defined in \"Name - ID zuordenen\", changed here when parameters changed\n\n//Variables for writing changes of the parameters to the form\nlet iterator = idValueMap.keys()\nlet id;\nlet changed = false;\nlet variableName=\"sinusVal\";\n\n/*################################# \n    Check if a parameter changed\n#################################*/\nidValueMap.forEach( () => {\n    id = iterator.next().value;\n    if(id != nameIDMap.get(variableName))\n    {\n        if(idValueMap.get(id) != oldValues.get(id))\n        {\n            oldValues.set(id, idValueMap.get(id));\n            changed = true;\n        }\n    }\n})\n\n/*################################# \n   if changed- update parameters in the form\n#################################*/\nif(changed)\n{\n    changed = false;\n    msg.payload = \n    {\n        \"Frequency\": idValueMap.get(nameIDMap.get(\"Frequency\")).toFixed(2),\n        \"Amplitude\": idValueMap.get(nameIDMap.get(\"Amplitude\")).toFixed(1),\n        \"Offset\": idValueMap.get(nameIDMap.get(\"Offset\")).toFixed(1)\n    }\n}else \n{\n    msg = null;\n}\n\n/*################################# \n    update global maps\n#################################*/ \nglobal.set(\"oldValues\", oldValues);\n\nreturn msg;\n\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":310,"y":220,"wires":[["ecafdd76.69e4b"]]},{"id":"42a23545.db05ec","type":"complete","z":"feae0bd8.ab7198","name":"","scope":["6d16e803.892018"],"uncaught":false,"x":110,"y":220,"wires":[["9cb49e99.1b056","3f59a6ad.42c2ea"]]},{"id":"76abe2ac.809b8c","type":"function","z":"feae0bd8.ab7198","name":"Init Program","func":"/*################################# \n    Init Variables\n#################################*/\nlet nameIDMap = global.get(\"NameIDMap\");\nlet idValueMap = new Map();         \nlet oldValues = new Map();          \nlet timestampMapObject = {};\n/*################################# \n    set default values for the form \n#################################*/\nidValueMap.set(nameIDMap.get(\"Frequency\"), Number(0.1));\nidValueMap.set(nameIDMap.get(\"Amplitude\"), Number(1.0));\nidValueMap.set(nameIDMap.get(\"Offset\"), Number(0.0));\n\n/*################################# \n    update global maps\n#################################*/  \nglobal.set(\"IDValueMap\", idValueMap);\nglobal.set(\"oldValues\", oldValues);\nglobal.set(\"timestampMapObject\",timestampMapObject);\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":670,"y":40,"wires":[["c939e165.5f80a"]]},{"id":"fb1b016c.97f41","type":"function","z":"feae0bd8.ab7198","name":"Parse Metadata","func":"/*################################# \n    Init Variables\n#################################*/\nlet nameIDMap = new Map();          //global only changed here\nlet connectionName = \"opcuaSinus\"; // Name of the connection\n\n\n/*################################# \n    Check Payload\n#################################*/\nlet m = msg.payload;\nif (m.seq == undefined) {\n    return null;\n} \n\n\n/*################################# \n    Parse payload and store name and id to the NameIDMap\n#################################*/    \n\n// Iterate through connections\nm.connections.forEach(connection => \n{\n    if ((connection.name == connectionName)) {\n        let dataPoints = connection.dataPoints;\n\n        //  Iterate through dataPoints\n        dataPoints.forEach( dataPoint => {\n            let dataPointDefinitions = dataPoint.dataPointDefinitions;\n\n            // Iterate through dataPointDefinitions\n            dataPointDefinitions.forEach(dataPointDefinition => {\n                nameIDMap.set(dataPointDefinition.name, dataPointDefinition.id);\n            });\n        });\n    }\n});\n\n\n/*################################# \n    update global maps\n#################################*/  \nglobal.set(\"NameIDMap\", nameIDMap);\n\n\nreturn msg;\n\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":420,"y":40,"wires":[["76abe2ac.809b8c"]]},{"id":"3f59a6ad.42c2ea","type":"function","z":"feae0bd8.ab7198","name":"getTimestamp and value","func":"let timestampMapObject = global.get(\"timestampMapObject\");\nlet nameIDMap = global.get(\"NameIDMap\");  \n\n//let object = timestampMapObject.\nlet newMsg = { payload: msg.payload.length };\n\nmsg.payload = timestampMapObject.ts;\n\nnewMsg.payload = timestampMapObject.map.get(nameIDMap.get(\"SinusVal\"))\n\nreturn [msg,newMsg];","outputs":2,"noerr":0,"initialize":"","finalize":"","x":350,"y":280,"wires":[[],[]]},{"id":"7023640.900da9c","type":"function","z":"feae0bd8.ab7198","name":"limit_real","func":"myValue = msg.payload;\nmyFixedPrecisionValue = myValue.toFixed(2); // \"70.3\" => keep in mind that this is a string\nmyFixedPrecisionNumber = Number(myFixedPrecisionValue); // 70.3\nmsg.payload = myFixedPrecisionNumber;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":860,"y":180,"wires":[["2e98ab94.d9e884"]]},{"id":"808a4da1.7d6fb","type":"mqtt-broker","name":"","broker":"ie-databus","port":"1883","clientid":"","usetls":false,"compatmode":false,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"7693872.f419678","type":"ui_group","name":"Sinus","tab":"17d61a1e.a98596","order":2,"disp":true,"width":"9","collapse":false},{"id":"17d61a1e.a98596","type":"ui_tab","name":"Home","icon":"dashboard","order":1,"disabled":false,"hidden":false}]